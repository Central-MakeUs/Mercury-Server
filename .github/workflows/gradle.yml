name: CI/CD

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  build:
    # Workflow가 실행되는 vm의 OS 지정
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # Repository 코드를 Workflow 환경으로 가져오기
      - uses: actions/checkout@v4

      # Java 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # yml 파일의 환경변수 설정
      - name: Set yml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application.yml
        env:
          spring.datasource.url: ${{ secrets.DB_MYSQL_URL }}
          spring.datasource.username: ${{ secrets.DB_MYSQL_USERNAME }}
          spring.datasource.password: ${{ secrets.DB_MYSQL_PASSWORD }}
          aladin.api.ttbkey: ${{ secrets.ALADIN_TTB_KEY }}
          swagger.server.http-url: ${{ secrets.SERVER_HTTP_URL }}
          swagger.server.https-url: ${{ secrets.SERVER_HTTPS_URL }}
          jwt.secret: ${{ secrets.JWT_SECRET }}
          jwt.access-token-validity: ${{ secrets.JWT_ACCESS_VALIDITY }}
          jwt.refresh-token-validity: ${{ secrets.JWT_REFRESH_VALIDITY }}
          spring.security.oauth2.client.registration.google.client-id: ${{ secrets.OAUTH_GOOGLE_ID }}
          spring.security.oauth2.client.registration.google.client-secret: ${{ secrets.OAUTH_GOOGLE_SECRET }}
          spring.security.oauth2.client.registration.google.redirect-uri: ${{ secrets.SERVER_HTTPS_URL }}/login/oauth2/code/google
          spring.security.oauth2.client.registration.apple.client-id: ${{ secrets.OAUTH_APPLE_CID }}
          spring.security.oauth2.client.registration.apple.client-secret: ${{ secrets.OAUTH_APPLE_P8 }}
          spring.security.oauth2.client.registration.apple.redirect-uri: ${{ secrets.SERVER_HTTPS_URL }}/login/oauth2/code/apple
          apple.key-content: ${{ secrets.OAUTH_APPLE_P8_KEY_CONTENT }}
          apple.cid: ${{ secrets.OAUTH_APPLE_CID }}
          apple.tid: ${{ secrets.OAUTH_APPLE_TID }}
          apple.kid: ${{ secrets.OAUTH_APPLE_KID }}
          spring.security.oauth2.client.registration.kakao.client-id: ${{ secrets.OAUTH_KAKAO_ID }}
          spring.security.oauth2.client.registration.kakao.client-secret: ${{ secrets.OAUTH_KAKAO_SECRET }}
          spring.security.oauth2.client.registration.kakao.redirect-uri: ${{ secrets.SERVER_HTTPS_URL }}/login/oauth2/code/kakao


      # 실행 속도 향상을 위한 Gradle 종속성 캐싱
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      # gradlew 파일에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Spring Boot 애플리케이션 빌드
      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 브랜치별 Docker 이미지 빌드 & 푸쉬
      - name: Build Docker Image & Push DockerHub
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker build --build-arg TZ=Asia/Seoul --build-arg SPRING_PROFILES_ACTIVE=prod -t ${{ secrets.DOCKERHUB_USERNAME }}/mercury-server:prod .
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/mercury-server:prod
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            docker build --build-arg TZ=Asia/Seoul --build-arg SPRING_PROFILES_ACTIVE=dev -t ${{ secrets.DOCKERHUB_USERNAME }}/mercury-server:dev .
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/mercury-server:dev
          fi

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # EC2에 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              # 운영 서버 배포 (8080 포트)
              docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mercury-server:prod
              docker stop mercury-prod || true
              docker rm mercury-prod || true
              docker image prune -f || true
              docker run -d --name mercury-prod -e SPRING_PROFILES_ACTIVE=prod -e TZ=Asia/Seoul -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/mercury-server:prod
            elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
              # 개발 서버 배포 (EC2의 8081 포트 → 컨테이너의 8080 포트)
              docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mercury-server:dev
              docker stop mercury-dev || true
              docker rm mercury-dev || true
              docker image prune -f || true
              docker run -d --name mercury-dev -e SPRING_PROFILES_ACTIVE=dev -e TZ=Asia/Seoul -p 8081:8080 ${{ secrets.DOCKERHUB_USERNAME }}/mercury-server:dev
            fi